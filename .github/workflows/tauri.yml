name: Tauri Build

on:
  push:
    tags:
      - 'v*.*.*'   # 仅在打 tag 时构建发布
  workflow_dispatch: # 也支持手动触发

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        # platform: [macos-latest, macos-13, windows-latest]
        # platform: [macos-latest, ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Npcap SDK (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          curl -LO https://npcap.com/dist/npcap-sdk-1.13.zip
          unzip -o npcap-sdk-1.13.zip
          echo "LIB=Lib/x64" >> $GITHUB_ENV
          echo "INCLUDE=Include" >> $GITHUB_ENV
          echo "PCAP_LIB_DIR=Lib/x64" >> $GITHUB_ENV
          pwd
          ls -al
          ls -al Lib/x64/
          ls Lib/x64/wpcap.lib

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libappindicator3-dev patchelf librsvg2-dev

      
      - name: Install Python distutils (Linux)
        if: runner.os == 'Linux'
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install distutils 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (pnpm)
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - run: pnpm install --no-frozen-lockfile

      - name: Install Tauri CLI
        run: pnpm dlx @tauri-apps/cli@latest --version

      - name: Build front-end
        run: pnpm build

      - name: Build Tauri app (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          export LIB="$(pwd)/Lib/x64"
          export INCLUDE="$(pwd)/Include"
          export PCAP_LIB_DIR="$(pwd)/Lib/x64"
          echo "LIB=$LIB"
          echo "INCLUDE=$INCLUDE"
          echo "PCAP_LIB_DIR=$PCAP_LIB_DIR"
          pnpm tauri build --ci

      - name: Tauri Build
        if: runner.os != 'Windows'
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: --ci

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

  release:
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/**/*.dmg
            ./artifacts/**/*.exe
            ./artifacts/**/*.msi
            ./artifacts/**/*.AppImage
            ./artifacts/**/*.deb
            ./artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
