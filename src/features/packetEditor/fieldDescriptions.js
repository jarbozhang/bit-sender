export const FIELD_DESCRIPTIONS = {
  // 通用以太网字段
  dst_mac: "目标设备的物理地址，用于标识数据包的接收方。格式为6个十六进制数，用冒号分隔，如 AA:BB:CC:DD:EE:FF",
  src_mac: "源设备的物理地址，用于标识数据包的发送方。会自动填充为选定网卡的MAC地址",
  ether_type: "以太网类型字段，标识上层协议类型。0800表示IPv4，0806表示ARP",
  
  // IPv4字段
  version: "IP协议版本号。IPv4固定为4，表示使用第4版本的Internet协议",
  ihl: "Internet头部长度，以4字节为单位。标准IPv4头部为20字节，对应值为5",
  tos: "服务类型字段，用于指定数据包的优先级和服务质量要求。通常设为0表示普通服务",
  total_length: "IP数据报的总长度（字节），包括IP头部和数据部分。设为0时系统会自动计算",
  identification: "标识字段，用于唯一标识一个数据报的所有分片，便于重组。通常设为0由系统分配",
  flags: "标志字段，控制分片行为。2表示不分片(Don't Fragment)，0表示可以分片",
  fragment_offset: "片偏移字段，表示当前分片在原始数据报中的位置。不分片时设为0",
  ttl: "生存时间，数据包在网络中能经过的最大路由器数量。每经过一个路由器减1，为0时丢弃",
  protocol: "协议字段，标识IP数据报中封装的上层协议类型。1=ICMP, 6=TCP, 17=UDP",
  header_checksum: "IP头部校验和，用于检测IP头部传输过程中的错误。设为0时系统会自动计算",
  srcIp: "源IP地址，标识数据包的发送方。会自动填充为选定网卡的IP地址",
  dstIp: "目的IP地址，标识数据包的接收方。需要填写目标主机的IP地址",
  
  // TCP字段
  srcPort: "源端口号，标识发送方应用程序的端口。范围0-65535，通常使用1024以上的端口",
  dstPort: "目的端口号，标识接收方应用程序的端口。如HTTP=80, HTTPS=443, SSH=22",
  seq: "序列号，用于TCP连接中数据的顺序控制和重传。建立连接时的初始序列号",
  ack: "确认号，表示期望接收的下一个序列号。只有ACK标志位为1时此字段才有效",
  data_offset: "数据偏移，TCP头部长度，以4字节为单位。标准TCP头部为20字节，对应值为5",
  reserved: "保留字段，必须设为0。为将来扩展TCP协议预留的字段",
  flag_urg: "紧急标志位。为1时表示紧急指针字段有效，数据包应优先处理",
  flag_ack: "确认标志位。为1时表示确认号字段有效，用于确认接收到的数据",
  flag_psh: "推送标志位。为1时要求立即将数据推送给应用程序，不进行缓冲",
  flag_rst: "复位标志位。为1时表示连接出现严重错误，需要重置连接",
  flag_syn: "同步标志位。为1时表示请求建立连接，用于TCP三次握手",
  flag_fin: "结束标志位。为1时表示发送方没有更多数据要发送，请求关闭连接",
  window_size: "窗口大小，表示接收方能够接收的数据字节数，用于流量控制",
  checksum: "TCP校验和，用于检测TCP头部和数据的传输错误。设为0时系统会自动计算",
  urgent_pointer: "紧急指针，当URG标志位为1时指示紧急数据的位置。通常设为0",
  
  // UDP字段
  length: "UDP长度，UDP头部和数据的总长度（字节）。设为0时系统会自动计算",
  
  // ARP字段
  hwType: "硬件类型，标识数据链路层协议类型。1表示以太网",
  protoType: "协议类型，标识网络层协议类型。0800表示IPv4协议",
  opcode: "操作码，标识ARP操作类型。1=ARP请求，2=ARP应答",
  srcMac: "发送方MAC地址，ARP报文中发送方的硬件地址",
  dstMac: "目标MAC地址，ARP报文中目标的硬件地址。请求时通常为全0",
  
  // 数据字段
  data: "载荷数据部分。TCP/UDP协议支持文本和十六进制格式，其他协议只支持十六进制格式"
};